# Mise configuration for Twilio Video KMP Project
# This file ensures everyone has the same development environment
# Usage: `mise install` to install all tools, `mise use` to activate them

[tools]
# Java Development Kit - Eclipse Temurin (reliable for KMP development)
java = "temurin-17.0.16+8"

# Gradle Build Tool - matches project wrapper version
gradle = "8.13"

# Node.js for potential tooling and scripts
node = "20.0.0"

# Python for scripting and tooling
python = "3.11.3"

# Ruby for CocoaPods (iOS dependency management)
ruby = "3.2.0"

# Kotlin Native compiler dependencies
kotlin = "2.2.0"

# YAML processor for tooling (useful for config files)
yq = "4.47.1"

[env]
# Android SDK configuration
ANDROID_HOME = "{{env.HOME}}/Library/Android/sdk"
ANDROID_SDK_ROOT = "{{env.HOME}}/Library/Android/sdk"

# Java configuration - mise handles this automatically
# JAVA_HOME will be set by mise when java tool is activated

# Gradle configuration - mise handles this automatically
# GRADLE_HOME will be set by mise when gradle tool is activated

# iOS development (if on macOS)
DEVELOPER_DIR = "/Applications/Xcode.app/Contents/Developer"

# KMP specific optimizations
KOTLIN_DAEMON_JVMARGS = "-Xmx2048m -XX:+UseParallelGC"
GRADLE_OPTS = "-Xmx4096m -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError"

# Mise configuration
MISE_EXPERIMENTAL = "true"

[tasks.install-deps]
description = "Install all project dependencies"
run = [
    "echo 'üì¶ Installing project dependencies...'",
    "gem install cocoapods",
    "echo '‚úÖ CocoaPods installed'",
    "./gradlew --version",
    "echo '‚úÖ Gradle verified'",
    "echo 'üéâ All dependencies installed successfully!'"
]

[tasks.setup]
description = "Complete project setup for new developers"
run = [
    "echo 'üöÄ Setting up Twilio Video KMP project...'",
    "mise install",
    "mise run install-deps",
    "echo 'üì± Checking Android SDK...'",
    "echo 'Please ensure Android SDK is installed at: $ANDROID_HOME'",
    "echo 'üçé Checking iOS tools (macOS only)...'",
    "xcode-select --print-path",
    "echo 'üß™ Running tests to verify setup...'",
    "./gradlew shared:test",
    "echo '‚úÖ Project setup complete!'"
]

[tasks.build]
description = "Build the entire project"
run = [
    "echo 'üî® Building Twilio Video KMP project...'",
    "./gradlew build"
]

[tasks.test]
description = "Run all tests"
run = [
    "echo 'üß™ Running shared module tests...'",
    "./gradlew shared:test",
    "echo '‚úÖ Shared module tests completed successfully!'"
]

[tasks.clean]
description = "Clean build artifacts"
run = [
    "echo 'üßπ Cleaning build artifacts...'",
    "./gradlew clean"
]

[tasks.android-build]
description = "Build Android app"
run = [
    "echo 'ü§ñ Building Android app...'",
    "./gradlew composeApp:assembleDebug"
]

[tasks.ios-setup]
description = "Setup iOS dependencies (macOS only)"
run = [
    "echo 'üçé Setting up iOS dependencies...'",
    "cd iosApp && pod install",
    "echo '‚úÖ iOS setup complete!'"
]

[tasks.verify-env]
description = "Verify development environment"
run = [
    "echo 'üîç Verifying development environment...'",
    "echo 'üìç Java version:'",
    "java -version",
    "echo 'üìç Gradle version:'",
    "./gradlew --version",
    "echo 'üìç Node.js version:'",
    "node --version",
    "echo 'üìç Python version:'",
    "python3 --version",
    "echo 'üìç Ruby version:'",
    "ruby --version",
    "echo 'üìç CocoaPods version:'",
    "pod --version",
    "echo 'üìç YQ version:'",
    "yq --version",
    "echo 'üìç Android SDK location:'",
    "echo $ANDROID_HOME",
    "echo 'üìç Xcode path:'",
    "xcode-select --print-path",
    "echo '‚úÖ Environment verification complete!'"
]

[tasks.android-sdk-check]
description = "Check Android SDK installation and setup"
run = '''
echo 'ü§ñ Checking Android SDK setup...'
if [ -z "$ANDROID_HOME" ]; then
  echo '‚ö†Ô∏è  ANDROID_HOME not set!'
  echo 'üí° Install Android Studio or Android SDK manually:'
  echo '   - Download from: https://developer.android.com/studio'
  echo '   - Set ANDROID_HOME to your SDK location'
  echo '   - Add ANDROID_HOME/tools and ANDROID_HOME/platform-tools to PATH'
  echo ''
  echo '‚ÑπÔ∏è  Run: mise run android-sdk-install-guide'
  exit 1
fi
echo "‚úÖ ANDROID_HOME: $ANDROID_HOME"
if [ -d "$ANDROID_HOME" ]; then
  echo '‚úÖ Android SDK directory exists'
  if command -v adb >/dev/null 2>&1; then
    echo '‚úÖ ADB available:'
    adb version
  else
    echo '‚ö†Ô∏è  ADB not found in PATH'
  fi
  if [ -f "$ANDROID_HOME/tools/bin/sdkmanager" ] || [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
    echo '‚úÖ SDK Manager available'
  else
    echo '‚ö†Ô∏è  SDK Manager not found'
  fi
else
  echo "‚ùå Android SDK directory not found at: $ANDROID_HOME"
  exit 1
  fi
  echo 'üéâ Android SDK setup looks good!'

[tasks.phase2-setup]
description = "Setup Phase 2 testing environment"
run = [
    "echo 'Setting up Phase 2 Testing Environment...'",
    "echo ''",
    "echo '1. Verifying environment...'",
    "mise run verify-env",
    "echo ''",
    "echo '2. Creating testing directories...'",
    "mkdir -p shared/src/androidTest/kotlin/com/johnlai/twiliovideo/test",
    "mkdir -p shared/src/commonTest/kotlin/com/johnlai/twiliovideo/test",
    "mkdir -p testData/video",
    "mkdir -p testData/audio",
    "mkdir -p testData/scenarios",
    "echo 'Testing directories created'",
    "echo ''",
    "echo '3. Checking Android environment...'",
    "mise run android-sdk-check",
    "echo ''",
    "echo '4. Creating .env.local template...'",
    "touch .env.local",
    "echo '# Twilio Video Credentials' > .env.local",
    "echo '# Get these from: https://console.twilio.com/' >> .env.local",
    "echo 'TWILIO_ACCOUNT_SID=your_account_sid_here' >> .env.local",
    "echo 'TWILIO_API_KEY_SID=your_api_key_sid_here' >> .env.local",
    "echo 'TWILIO_API_KEY_SECRET=your_api_key_secret_here' >> .env.local",
    "echo '' >> .env.local",
    "echo '# Testing Configuration' >> .env.local",
    "echo 'TEST_ROOM_NAME=twilio-video-kmp-test' >> .env.local",
    "echo 'TEST_USER_IDENTITY=test-user' >> .env.local",
    "echo '.env.local template created'",
    "echo ''",
    "echo 'Phase 2 setup complete!'",
    "echo 'Next steps:'",
    "echo '  1. Edit .env.local with real Twilio credentials'",
    "echo '  2. Run: mise run phase2-test-check'",
    "echo '  3. Review: doc/PHASE_2_TESTING_SETUP.md'"
]

[tasks.phase2-test-check]
description = "Verify Phase 2 testing environment"
run = [
    "echo 'Verifying Phase 2 Testing Environment...'",
    "echo ''",
    "echo 'Checking testing directories...'",
    "ls -la shared/src/androidTest/ || echo 'Android test directory missing'",
    "ls -la testData/ || echo 'Test data directory missing'",
    "echo ''",
    "echo 'Checking Twilio credentials...'",
    "ls -la .env.local || echo '.env.local file missing - run: mise run phase2-setup'",
    "echo ''",
    "echo 'Checking Android setup...'",
    "mise run android-sdk-check",
    "echo ''",
    "echo 'Running existing tests...'",
    "./gradlew shared:test",
    "echo ''",
    "echo 'Ready for Phase 2 implementation!'"
]

[tasks.android-emulator-setup]
description = "Setup Android emulator for video testing"
run = [
    "echo 'Setting up Android emulator for video testing...'",
    "echo 'Note: This requires ANDROID_HOME to be set'",
    "echo ''",
    "echo 'Available system images:'",
    "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | head -20",
    "echo ''",
    "echo 'Installing required system image...'",
    "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager 'system-images;android-34;google_apis;x86_64'",
    "echo ''",
    "echo 'Creating TwilioVideoTest emulator...'",
    "$ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n TwilioVideoTest -k 'system-images;android-34;google_apis;x86_64' -c 2048M --force",
    "echo ''",
    "echo 'Emulator setup complete!'",
    "echo 'Start with: $ANDROID_HOME/emulator/emulator -avd TwilioVideoTest'"
]

[tasks.android-sdk-install-guide]
description = "Show Android SDK installation guide"
run = [
    "echo 'üì± Android SDK Installation Guide'",
    "echo '================================'",
    "echo ''",
    "echo 'üéØ Option 1: Android Studio (Recommended)'",
    "echo '  1. Download Android Studio: https://developer.android.com/studio'",
    "echo '  2. Install and run Android Studio'",
    "echo '  3. Open SDK Manager (Tools ‚Üí SDK Manager)'",
    "echo '  4. Install:'",
    "echo '     - Android SDK Platform 35 (for compileSdk)'",
    "echo '     - Android SDK Platform 24 (for minSdk)' ",
    "echo '     - Android SDK Build-Tools 35.0.0'",
    "echo '     - Android SDK Platform-Tools'",
    "echo '     - Android SDK Tools'",
    "echo ''",
    "echo 'üéØ Option 2: Command Line Tools Only'",
    "echo '  1. Download command line tools: https://developer.android.com/studio#downloads'",
    "echo '  2. Extract to ~/Library/Android/sdk/cmdline-tools/latest'",
    "echo '  3. Install packages:'",
    "echo '     ~/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager \"platforms;android-35\"'",
    "echo '     ~/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager \"platforms;android-24\"'",
    "echo '     ~/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager \"build-tools;35.0.0\"'",
    "echo '     ~/Library/Android/sdk/cmdline-tools/latest/bin/sdkmanager \"platform-tools\"'",
    "echo ''",
    "echo '‚öôÔ∏è  Environment Setup:'",
    "echo '  Add to your shell profile (~/.zshrc or ~/.bashrc):'",
    "echo '  export ANDROID_HOME=~/Library/Android/sdk'",
    "echo '  export PATH=$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools'",
    "echo ''",
    "echo '‚úÖ Verification:'",
    "echo '  mise run android-sdk-check'"
]

[tasks.dev-docs]
description = "Show development documentation"
run = [
    "echo 'üìö Twilio Video KMP Development Guide'",
    "echo '=================================='",
    "echo ''",
    "echo 'üöÄ Quick Start:'",
    "echo '  mise run setup     # Complete project setup'",
    "echo '  mise run build     # Build entire project'",
    "echo '  mise run test      # Run all tests'",
    "echo ''",
    "echo 'ü§ñ Android Development:'",
    "echo '  mise run android-build  # Build Android app'",
    "echo '  ./gradlew composeApp:installDebug  # Install on device'",
    "echo ''",
    "echo 'üçé iOS Development (macOS only):'",
    "echo '  mise run ios-setup     # Setup iOS dependencies'",
    "echo '  open iosApp/iosApp.xcodeproj  # Open in Xcode'",
    "echo ''",
    "echo 'üß™ Testing:'",
    "echo '  ./gradlew shared:test  # Run shared module tests'",
    "echo '  ./gradlew check       # Run all checks'",
    "echo ''",
    "echo 'üîß Utilities:'",
    "echo '  mise run verify-env        # Verify environment'",
    "echo '  mise run android-sdk-check # Check Android SDK'",
    "echo '  mise run phase2-setup      # Setup Phase 2 testing'",
    "echo '  mise run clean             # Clean build artifacts'",
    "echo ''",
    "echo 'üìñ Documentation & Setup:'",
    "echo '  mise run android-sdk-install-guide # Android SDK setup guide'",
    "echo '  mise run phase2-test-check         # Verify Phase 2 environment'",
    "echo '  doc/TWILIO_VIDEO_KMP_PLAN.md      # Project plan'",
    "echo '  doc/PHASE_1_TUTORIAL.md           # Phase 1 guide'",
    "echo '  doc/PHASE_2_TESTING_SETUP.md      # Phase 2 testing setup'",
    "echo ''",
    "echo 'üîó Useful Links:'",
    "echo '  - Twilio Video Docs: https://www.twilio.com/docs/video'",
    "echo '  - KMP Docs: https://kotlinlang.org/docs/multiplatform.html'",
    "echo '  - Compose Multiplatform: https://github.com/JetBrains/compose-multiplatform'"
]

# Platform-specific configurations
[settings]
experimental = true

# Development shortcuts
[alias]
s = "run setup"
b = "run build"
t = "run test"
c = "run clean"
v = "run verify-env"
docs = "run dev-docs"
